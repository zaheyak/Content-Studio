// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User/Trainer model
model Trainer {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  skills    String[] // Array of skill IDs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses   Course[]
  content   Content[]

  @@map("trainers")
}

// Course model
model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      CourseStatus @default(DRAFT)
  trainerId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trainer     Trainer @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@map("courses")
}

// Lesson model
model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?
  order       Int
  status      LessonStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  content     Content[]

  @@map("lessons")
}

// Content model - stores different types of content
model Content {
  id          String   @id @default(cuid())
  lessonId    String
  trainerId   String
  type        ContentType
  title       String
  content     String   // JSON string containing the actual content
  format      String   // text, pdf, audio, video, etc.
  status      ContentStatus @default(PROCESSING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  trainer     Trainer @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@map("content")
}

// AI Processing Jobs model
model AIJob {
  id          String   @id @default(cuid())
  type        AIJobType
  input       String   // JSON string with input data
  output      String?  // JSON string with output data
  status      AIJobStatus @default(PENDING)
  progress    Int      @default(0)
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ai_jobs")
}

// Enums
enum CourseStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  TEXT
  PRESENTATION
  MINDMAP
  AUDIO
  VIDEO
  INTERACTIVE
}

enum ContentStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum AIJobType {
  VIDEO_TO_TRANSCRIPT
  GENERATE_LESSON
  GENERATE_MINDMAP
  TRANSLATE
  QUALITY_CHECK
}

enum AIJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}