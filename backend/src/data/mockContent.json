[
  {
    "id": "content_1",
    "title": "JavaScript Fundamentals - Complete Lesson",
    "description": "A comprehensive lesson covering JavaScript fundamentals with all content formats including video, text, presentation, mind map, code examples, and visuals.",
    "type": "LESSON",
    "content_data": {
      "lessonId": "lesson_1",
      "courseId": "course_1",
      "sections": [
        {
          "id": "section_1",
          "title": "Introduction to JavaScript",
          "type": "TEXT",
          "content": "JavaScript is a high-level, interpreted programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. It enables interactive web pages and is an essential part of web applications."
        },
        {
          "id": "section_2",
          "title": "Variables and Data Types",
          "type": "TEXT",
          "content": "JavaScript has several data types including numbers, strings, booleans, objects, arrays, and more. Variables are declared using var, let, or const keywords."
        }
      ],
      "video": {
        "url": "https://www.youtube.com/watch?v=W6NZfCO5SIk",
        "title": "JavaScript Fundamentals Explained",
        "duration": "15:30",
        "transcription": "Welcome to JavaScript fundamentals! In this video, we'll cover the basics of JavaScript programming...",
        "ai_transcribed": true,
        "thumbnail": "https://img.youtube.com/vi/W6NZfCO5SIk/maxresdefault.jpg"
      },
      "presentation": {
        "slides": [
          {
            "id": "slide_1",
            "title": "JavaScript Fundamentals",
            "content": "Introduction to JavaScript programming language",
            "notes": "Start with enthusiasm and explain the importance of JavaScript"
          },
          {
            "id": "slide_2",
            "title": "Variables and Data Types",
            "content": "Understanding JavaScript variables and different data types",
            "notes": "Show examples of each data type"
          },
          {
            "id": "slide_3",
            "title": "Functions in JavaScript",
            "content": "Creating and using functions in JavaScript",
            "notes": "Demonstrate function declarations and expressions"
          }
        ],
        "template": "modern",
        "ai_generated": true
      },
      "mindmap": {
        "nodes": [
          { "id": "root", "text": "JavaScript Fundamentals", "x": 0, "y": 0 },
          { "id": "variables", "text": "Variables", "parent": "root", "x": -200, "y": -100 },
          { "id": "dataTypes", "text": "Data Types", "parent": "variables", "x": -300, "y": -150 },
          { "id": "functions", "text": "Functions", "parent": "root", "x": 200, "y": -100 },
          { "id": "objects", "text": "Objects", "parent": "root", "x": 0, "y": 100 },
          { "id": "arrays", "text": "Arrays", "parent": "objects", "x": -100, "y": 150 }
        ],
        "ai_generated": true
      },
      "code": {
        "snippets": [
          {
            "id": "snippet_1",
            "language": "javascript",
            "code": "// Variables and Data Types\nlet name = 'John';\nconst age = 25;\nvar isStudent = true;\n\nconsole.log(typeof name); // string\nconsole.log(typeof age);  // number\nconsole.log(typeof isStudent); // boolean",
            "explanation": "This example shows how to declare variables using different keywords and demonstrates JavaScript's dynamic typing."
          },
          {
            "id": "snippet_2",
            "language": "javascript",
            "code": "// Functions in JavaScript\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\n// Arrow function\nconst greetArrow = (name) => `Hello, ${name}!`;\n\nconsole.log(greet('World')); // Hello, World!\nconsole.log(greetArrow('JavaScript')); // Hello, JavaScript!",
            "explanation": "Demonstrates both traditional function declarations and modern arrow function syntax."
          }
        ],
        "ai_generated": true
      },
      "images": {
        "visuals": [
          {
            "id": "image_1",
            "url": "https://via.placeholder.com/600x400?text=JavaScript+Variables",
            "alt": "JavaScript Variables Diagram",
            "caption": "Visual representation of JavaScript variable types and their usage."
          },
          {
            "id": "image_2",
            "url": "https://via.placeholder.com/600x400?text=Data+Types+Flowchart",
            "alt": "JavaScript Data Types Flowchart",
            "caption": "Flowchart showing different JavaScript data types and their relationships."
          }
        ],
        "ai_generated": true
      },
      "summary": "This lesson provides a comprehensive introduction to JavaScript fundamentals, covering variables, data types, functions, and basic programming concepts. Students will learn the essential building blocks of JavaScript programming through interactive examples and practical exercises.",
      "ai_generated_summary": true
    },
    "status": "PUBLISHED",
    "tags": ["JavaScript", "Fundamentals", "Programming", "Beginner"],
    "metadata": {
      "learning_outcomes": [
        "Understand JavaScript syntax and basic concepts",
        "Declare and use variables with different data types",
        "Create and call functions in JavaScript",
        "Understand JavaScript's dynamic typing"
      ],
      "prerequisites": ["Basic HTML/CSS knowledge"],
      "difficulty": "BEGINNER",
      "estimatedDuration": "2 hours"
    },
    "author_id": "user_2",
    "course_id": "course_1",
    "lesson_id": "lesson_1",
    "created_at": "2025-01-05T10:00:00.000Z",
    "updated_at": "2025-01-05T10:00:00.000Z"
  },
  {
    "id": "content_2",
    "title": "Async/Await Deep Dive - Complete Lesson",
    "description": "Master asynchronous JavaScript with async/await patterns, including comprehensive video tutorial, detailed explanations, presentation slides, mind map, code examples, and visual aids.",
    "type": "LESSON",
    "content_data": {
      "lessonId": "lesson_3",
      "courseId": "course_1",
      "sections": [
        {
          "id": "section_1",
          "title": "Introduction to Asynchronous JavaScript",
          "type": "TEXT",
          "content": "Asynchronous JavaScript allows your program to start a potentially long-running task and still be responsive to other events while that task runs. Once the task finishes, your program is notified and can access the result."
        },
        {
          "id": "section_2",
          "title": "Understanding Promises",
          "type": "TEXT",
          "content": "Before async/await, Promises were the primary way to handle asynchronous operations. A Promise represents the eventual completion (or failure) of an asynchronous operation and its resulting value."
        },
        {
          "id": "section_3",
          "title": "The async Keyword",
          "type": "TEXT",
          "content": "The async keyword is used to define an asynchronous function, which implicitly returns a Promise. Inside an async function, you can use the await keyword to pause the execution until a Promise is settled."
        }
      ],
      "video": {
        "url": "https://www.youtube.com/watch?v=lih3_b_s_4Q",
        "title": "JavaScript Async/Await Explained in 7 Minutes",
        "duration": "07:30",
        "transcription": "Hey everyone, welcome back to the channel! Today we're diving into one of the most powerful features in modern JavaScript: async and await. If you've ever struggled with callback hell or promise chains, async/await is here to make your life a lot easier. Let's get started!...",
        "ai_transcribed": true,
        "thumbnail": "https://img.youtube.com/vi/lih3_b_s_4Q/maxresdefault.jpg"
      },
      "presentation": {
        "slides": [
          {
            "id": "slide_1",
            "title": "Async/Await: Modern Async JavaScript",
            "content": "Simplifying asynchronous code with ES2017 features",
            "notes": "Introduction to the topic and its importance"
          },
          {
            "id": "slide_2",
            "title": "The Problem: Callback Hell & Promise Chains",
            "content": "Reviewing traditional async patterns and their complexities",
            "notes": "Discuss pyramid of doom and verbose promise syntax"
          },
          {
            "id": "slide_3",
            "title": "async Functions: Always Return a Promise",
            "content": "How async keyword transforms a function into an asynchronous one",
            "notes": "Explain implicit Promise return and its implications"
          },
          {
            "id": "slide_4",
            "title": "await Operator: Pause Until Promise Settles",
            "content": "Using await to wait for a Promise resolution inside an async function",
            "notes": "Demonstrate how await makes async code look synchronous"
          },
          {
            "id": "slide_5",
            "title": "Error Handling with try...catch",
            "content": "Gracefully handling errors in async/await using familiar constructs",
            "notes": "Show examples of try/catch with async/await"
          }
        ],
        "template": "modern",
        "ai_generated": true
      },
      "mindmap": {
        "nodes": [
          { "id": "root", "text": "Async/Await" },
          { "id": "async_func", "text": "async Function", "parent": "root" },
          { "id": "returns_promise", "text": "Returns Promise", "parent": "async_func" },
          { "id": "await_op", "text": "await Operator", "parent": "root" },
          { "id": "pause_exec", "text": "Pauses Execution", "parent": "await_op" },
          { "id": "promise_settles", "text": "Waits for Promise", "parent": "await_op" },
          { "id": "error_handling", "text": "Error Handling", "parent": "root" },
          { "id": "try_catch", "text": "try...catch", "parent": "error_handling" }
        ],
        "ai_generated": true
      },
      "code": {
        "snippets": [
          {
            "id": "snippet_1",
            "language": "javascript",
            "code": "async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}",
            "explanation": "This example shows how to fetch data from an API using async/await with error handling. The await keyword pauses execution until the fetch and response.json() Promises resolve."
          },
          {
            "id": "snippet_2",
            "language": "javascript",
            "code": "async function sequentialOperations() {\n  const result1 = await someAsyncFunction1();\n  const result2 = await someAsyncFunction2(result1);\n  console.log(result2);\n}",
            "explanation": "Demonstrates sequential asynchronous operations. someAsyncFunction2 only starts after someAsyncFunction1 has completed, and its result is available."
          },
          {
            "id": "snippet_3",
            "language": "javascript",
            "code": "async function concurrentOperations() {\n  const [result1, result2] = await Promise.all([\n    someAsyncFunction1(),\n    someAsyncFunction2()\n  ]);\n  console.log(result1, result2);\n}",
            "explanation": "Shows how to run multiple asynchronous operations concurrently using Promise.all with async/await. The function waits for all promises to resolve before continuing."
          }
        ],
        "ai_generated": true
      },
      "images": {
        "visuals": [
          {
            "id": "image_1",
            "url": "https://via.placeholder.com/600x400?text=Async+Flowchart",
            "alt": "Flowchart illustrating asynchronous execution flow",
            "caption": "Visualizing the flow of an async function with await"
          },
          {
            "id": "image_2",
            "url": "https://via.placeholder.com/600x400?text=Promise+States",
            "alt": "Diagram of Promise states: pending, fulfilled, rejected",
            "caption": "The lifecycle of a JavaScript Promise"
          }
        ],
        "ai_generated": true
      },
      "summary": "This lesson provides a deep dive into JavaScript's async and await features, explaining their role in modern asynchronous programming. It covers the transition from Promises, the syntax and behavior of async functions and await expressions, and robust error handling using try...catch blocks. Practical examples and best practices are included to ensure a solid understanding of building responsive and efficient JavaScript applications.",
      "ai_generated_summary": true
    },
    "status": "PUBLISHED",
    "tags": ["JavaScript", "Async", "Await", "Promises", "Asynchronous Programming"],
    "metadata": {
      "learning_outcomes": [
        "Explain the purpose of async/await",
        "Implement async/await for API calls",
        "Handle errors in async functions",
        "Use async/await with Promise.all for concurrent operations"
      ],
      "prerequisites": ["Basic JavaScript functions and callbacks"],
      "difficulty": "INTERMEDIATE",
      "estimatedDuration": "4 hours"
    },
    "author_id": "user_2",
    "course_id": "course_1",
    "lesson_id": "lesson_3",
    "created_at": "2025-01-05T10:00:00.000Z",
    "updated_at": "2025-01-05T10:00:00.000Z"
  },
  {
    "id": "content_3",
    "title": "Custom Hooks Mastery - Complete Lesson",
    "description": "Learn to create and use custom React hooks effectively with comprehensive content across all formats.",
    "type": "LESSON",
    "content_data": {
      "lessonId": "lesson_4",
      "courseId": "course_2",
      "sections": [
        {
          "id": "section_1",
          "title": "Introduction to Custom Hooks",
          "type": "TEXT",
          "content": "Custom hooks are JavaScript functions that start with 'use' and can call other hooks. They allow you to extract component logic into reusable functions."
        },
        {
          "id": "section_2",
          "title": "Rules of Hooks",
          "type": "TEXT",
          "content": "Hooks must be called at the top level of React functions, not inside loops, conditions, or nested functions. This ensures hooks are called in the same order every time."
        }
      ],
      "video": {
        "url": "https://www.youtube.com/watch?v=6ThXsUwLWvc",
        "title": "Custom React Hooks Explained",
        "duration": "12:45",
        "transcription": "Custom hooks are one of the most powerful features in React. They allow you to extract component logic into reusable functions...",
        "ai_transcribed": true,
        "thumbnail": "https://img.youtube.com/vi/6ThXsUwLWvc/maxresdefault.jpg"
      },
      "presentation": {
        "slides": [
          {
            "id": "slide_1",
            "title": "What are Custom Hooks?",
            "content": "JavaScript functions that start with 'use' and can call other hooks",
            "notes": "Explain the naming convention and purpose"
          },
          {
            "id": "slide_2",
            "title": "Rules of Hooks",
            "content": "Only call hooks at the top level of React functions",
            "notes": "Emphasize the importance of following these rules"
          }
        ],
        "template": "modern",
        "ai_generated": true
      },
      "mindmap": {
        "nodes": [
          { "id": "root", "text": "Custom Hooks" },
          { "id": "rules", "text": "Rules of Hooks", "parent": "root" },
          { "id": "top_level", "text": "Top Level Only", "parent": "rules" },
          { "id": "reusability", "text": "Reusability", "parent": "root" },
          { "id": "logic_extraction", "text": "Logic Extraction", "parent": "reusability" }
        ],
        "ai_generated": true
      },
      "code": {
        "snippets": [
          {
            "id": "snippet_1",
            "language": "javascript",
            "code": "// Custom hook for API data fetching\nfunction useApi(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch(err => {\n        setError(err);\n        setLoading(false);\n      });\n  }, [url]);\n\n  return { data, loading, error };\n}",
            "explanation": "This custom hook encapsulates the logic for fetching data from an API, including loading and error states."
          }
        ],
        "ai_generated": true
      },
      "images": {
        "visuals": [
          {
            "id": "image_1",
            "url": "https://via.placeholder.com/600x400?text=Custom+Hooks+Diagram",
            "alt": "Custom Hooks Architecture Diagram",
            "caption": "Visual representation of how custom hooks work in React"
          }
        ],
        "ai_generated": true
      },
      "summary": "This lesson covers the creation and usage of custom React hooks, including the rules of hooks and best practices for building reusable logic.",
      "ai_generated_summary": true
    },
    "status": "PUBLISHED",
    "tags": ["React", "Hooks", "Custom Hooks", "JavaScript"],
    "metadata": {
      "learning_outcomes": [
        "Create custom hooks for reusable logic",
        "Follow the rules of hooks",
        "Extract component logic into custom hooks"
      ],
      "prerequisites": ["Basic React knowledge", "Understanding of useState and useEffect"],
      "difficulty": "ADVANCED",
      "estimatedDuration": "3 hours"
    },
    "author_id": "user_2",
    "course_id": "course_2",
    "lesson_id": "lesson_4",
    "created_at": "2025-01-10T11:00:00.000Z",
    "updated_at": "2025-01-10T11:00:00.000Z"
  }
]

