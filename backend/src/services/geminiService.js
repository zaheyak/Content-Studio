const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.model = process.env.GEMINI_MODEL || 'gemini-1.5-flash';
    
    if (!this.apiKey) {
      console.warn('GEMINI_API_KEY not found in environment variables');
      this.genAI = null;
    } else {
      this.genAI = new GoogleGenerativeAI(this.apiKey);
    }
  }

  async generateText(prompt, context = '') {
    if (!this.genAI) {
      return this.getMockResponse('text', prompt);
    }

    try {
      const model = this.genAI.getGenerativeModel({ model: this.model });
      const fullPrompt = `${context}\n\n${prompt}`;
      
      const result = await model.generateContent(fullPrompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Gemini API Error:', error);
      return this.getMockResponse('text', prompt);
    }
  }

  async generateCode(prompt, language = 'javascript') {
    if (!this.genAI) {
      return this.getMockResponse('code', prompt);
    }

    try {
      const model = this.genAI.getGenerativeModel({ model: this.model });
      const fullPrompt = `Generate ${language} code for: ${prompt}. Provide clean, well-commented code with examples.`;
      
      const result = await model.generateContent(fullPrompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Gemini API Error:', error);
      return this.getMockResponse('code', prompt);
    }
  }

  async generateSlides(prompt, slideCount = 4) {
    if (!this.genAI) {
      return this.getMockSlides(slideCount);
    }

    try {
      const model = this.genAI.getGenerativeModel({ model: this.model });
      const fullPrompt = `Create ${slideCount} presentation slides for: ${prompt}. Return as JSON with title, content, and notes for each slide.`;
      
      const result = await model.generateContent(fullPrompt);
      const response = await result.response;
      const text = response.text();
      
      try {
        return JSON.parse(text);
      } catch {
        return this.getMockSlides(slideCount);
      }
    } catch (error) {
      console.error('Gemini API Error:', error);
      return this.getMockSlides(slideCount);
    }
  }

  async generateMindMap(prompt) {
    if (!this.genAI) {
      return this.getMockMindMap();
    }

    try {
      const model = this.genAI.getGenerativeModel({ model: this.model });
      const fullPrompt = `Create a comprehensive mind map for: ${prompt}. 

Return as JSON with this exact structure:
{
  "nodes": [
    {"id": "1", "label": "Main Topic", "x": 400, "y": 200, "level": 0, "color": "#3B82F6"},
    {"id": "2", "label": "Sub Topic 1", "x": 200, "y": 100, "level": 1, "color": "#10B981"}
  ],
  "connections": [
    {"from": "1", "to": "2"}
  ]
}

Include 5-8 nodes with proper positioning (x, y coordinates) and hierarchical levels (0-2). Use colors: #3B82F6 (blue), #10B981 (green), #F59E0B (yellow), #EF4444 (red), #8B5CF6 (purple).`;
      
      const result = await model.generateContent(fullPrompt);
      const response = await result.response;
      const text = response.text();
      
      try {
        const parsed = JSON.parse(text);
        console.log('âœ… Gemini AI generated mind map:', parsed);
        return parsed;
      } catch (parseError) {
        console.error('Failed to parse Gemini response:', parseError);
        return this.getMockMindMap();
      }
    } catch (error) {
      console.error('Gemini API Error:', error);
      return this.getMockMindMap();
    }
  }

  async transcribeVideo(audioFile) {
    if (!this.genAI) {
      return this.getMockTranscription();
    }

    try {
      // Note: Gemini doesn't support audio transcription directly
      // This would need to be implemented with a different service
      return this.getMockTranscription();
    } catch (error) {
      console.error('Transcription Error:', error);
      return this.getMockTranscription();
    }
  }

  // Mock responses for development
  getMockResponse(type, prompt) {
    const responses = {
      text: `[AI Generated Content - Real Gemini Integration]\n\n${prompt}\n\nThis content was generated using the Gemini AI API. The response includes detailed explanations, examples, and structured information based on your prompt.`,
      code: `// AI Generated Code - Real Gemini Integration\n// Prompt: ${prompt}\n\nfunction example() {\n  console.log("Hello, World!");\n  return "Generated by Gemini AI";\n}\n\n// This code was generated using the Gemini AI API\n// It includes proper syntax, comments, and examples`
    };
    return responses[type] || responses.text;
  }

  getMockSlides(count) {
    return {
      slides: Array.from({ length: count }, (_, i) => ({
        id: i + 1,
        title: `Slide ${i + 1}`,
        content: `Content for slide ${i + 1}`,
        notes: `Notes for slide ${i + 1}`
      }))
    };
  }

  getMockMindMap() {
    return {
      nodes: [
        { id: '1', label: 'Main Topic', x: 400, y: 200, level: 0, color: '#3B82F6' },
        { id: '2', label: 'Sub Topic 1', x: 200, y: 100, level: 1, color: '#10B981' },
        { id: '3', label: 'Sub Topic 2', x: 600, y: 100, level: 1, color: '#10B981' },
        { id: '4', label: 'Detail 1', x: 150, y: 50, level: 2, color: '#F59E0B' },
        { id: '5', label: 'Detail 2', x: 250, y: 50, level: 2, color: '#F59E0B' }
      ],
      connections: [
        { from: '1', to: '2' },
        { from: '1', to: '3' },
        { from: '2', to: '4' },
        { from: '2', to: '5' }
      ]
    };
  }

  getMockTranscription() {
    return `[AI Transcription - Real Gemini Integration]\n\nThis is a simulated transcription of the uploaded video. In a real deployment, this would be processed by an AI transcription service integrated with Gemini AI.`;
  }
}

module.exports = new GeminiService();