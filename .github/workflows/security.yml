name: Security

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency security audit
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run npm audit
        run: |
          cd backend && npm audit --audit-level moderate
          cd ../frontend && npm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: |
          cd backend && npm audit --json > backend-audit.json
          cd ../frontend && npm audit --json > frontend-audit.json

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-results
          path: |
            backend-audit.json
            frontend-audit.json

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # CodeQL analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v4

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4

  # Container security (if applicable)
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build container image
        run: |
          # Build container if Dockerfile exists
          if [ -f "Dockerfile" ]; then
            docker build -t content-studio:latest .
          fi

      - name: Scan container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'content-studio:latest'
          format: 'sarif'
          output: 'container-scan-results.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'container-scan-results.sarif'

  # Security policy compliance
  security-compliance:
    name: Security Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security headers
        run: |
          echo "Checking security headers configuration..."
          # Add security header checks

      - name: Validate security configuration
        run: |
          echo "Validating security configuration..."
          # Add security configuration validation

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for hardcoded secrets..."
          # Add hardcoded secret detection

  # Security report generation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-audit, secret-scan, codeql-analysis]
    if: always()

    steps:
      - name: Generate security report
        run: |
          echo "## ðŸ”’ Security Report" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerability Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Audit | ${{ needs.dependency-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#security'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()
